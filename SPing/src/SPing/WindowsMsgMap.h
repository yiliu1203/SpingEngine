#pragma once
#include <unordered_map>
#include <Windows.h>
#include <iostream>
#include <sstream>


#define REGISTER_MSG(MSG) {MSG, #MSG}
static std::unordered_map<UINT, std::string> MSG_MAP = {
	REGISTER_MSG(WM_QUIT),
	REGISTER_MSG(WM_ACTIVATEAPP),
	REGISTER_MSG(WM_CANCELMODE),
	REGISTER_MSG(WM_CHILDACTIVATE),
	REGISTER_MSG(WM_CLOSE),
	REGISTER_MSG(WM_COMPACTING),
	REGISTER_MSG(WM_CREATE),
	REGISTER_MSG(WM_DESTROY),
	REGISTER_MSG(WM_ENABLE),
	REGISTER_MSG(WM_ENTERSIZEMOVE),
	REGISTER_MSG(WM_EXITSIZEMOVE),
	REGISTER_MSG(WM_GETICON),
	REGISTER_MSG(WM_GETMINMAXINFO),
	REGISTER_MSG(WM_INPUTLANGCHANGE),
	REGISTER_MSG(WM_INPUTLANGCHANGEREQUEST),
	REGISTER_MSG(WM_MOVE),
	REGISTER_MSG(WM_MOVING),
	REGISTER_MSG(WM_NCACTIVATE),
	REGISTER_MSG(WM_NCCALCSIZE),
	REGISTER_MSG(WM_NCCREATE),
	REGISTER_MSG(WM_NCDESTROY),
	REGISTER_MSG(WM_NULL),
	REGISTER_MSG(WM_QUERYDRAGICON),
	REGISTER_MSG(WM_QUERYOPEN),
	REGISTER_MSG(WM_SHOWWINDOW),
	REGISTER_MSG(WM_SIZE),
	REGISTER_MSG(WM_SIZING),
	REGISTER_MSG(WM_STYLECHANGED),
	REGISTER_MSG(WM_STYLECHANGING),
	REGISTER_MSG(WM_THEMECHANGED),
	REGISTER_MSG(WM_USERCHANGED),
	REGISTER_MSG(WM_WINDOWPOSCHANGED),
	REGISTER_MSG(WM_STYLECHANGED),
	REGISTER_MSG(WM_WINDOWPOSCHANGING),

	REGISTER_MSG(WM_ACTIVATE),
	REGISTER_MSG(WM_APPCOMMAND),
	REGISTER_MSG(WM_CHAR),
	REGISTER_MSG(WM_DEADCHAR),
	REGISTER_MSG(WM_HOTKEY),
	REGISTER_MSG(WM_KEYDOWN),
	REGISTER_MSG(WM_KEYUP),
	REGISTER_MSG(WM_KILLFOCUS),
	REGISTER_MSG(WM_SETFOCUS),
	REGISTER_MSG(WM_SYSDEADCHAR),
	REGISTER_MSG(WM_SYSKEYDOWN),
	REGISTER_MSG(WM_SYSKEYUP),
	REGISTER_MSG(WM_UNICHAR),
	REGISTER_MSG(WM_SYSDEADCHAR),
	REGISTER_MSG(WM_SYSKEYDOWN),

	REGISTER_MSG(WM_CAPTURECHANGED),
	REGISTER_MSG(WM_LBUTTONDBLCLK),
	REGISTER_MSG(WM_LBUTTONDOWN),
	REGISTER_MSG(WM_LBUTTONUP),
	REGISTER_MSG(WM_MBUTTONDBLCLK),
	REGISTER_MSG(WM_MBUTTONDOWN),
	REGISTER_MSG(WM_MBUTTONUP),
	REGISTER_MSG(WM_MOUSEACTIVATE),
	REGISTER_MSG(WM_MOUSEHOVER),
	REGISTER_MSG(WM_MOUSEHWHEEL),
	REGISTER_MSG(WM_MOUSELEAVE),
	REGISTER_MSG(WM_MOUSEMOVE),
	REGISTER_MSG(WM_MOUSEWHEEL),
	REGISTER_MSG(WM_NCHITTEST),
	REGISTER_MSG(WM_NCLBUTTONDBLCLK),

	REGISTER_MSG(WM_CAPTURECHANGED),
	REGISTER_MSG(WM_LBUTTONDBLCLK),
	REGISTER_MSG(WM_LBUTTONDOWN),
	REGISTER_MSG(WM_LBUTTONUP),
	REGISTER_MSG(WM_MBUTTONDBLCLK),
	REGISTER_MSG(WM_MBUTTONDOWN),
	REGISTER_MSG(WM_MBUTTONUP),
	REGISTER_MSG(WM_MOUSEACTIVATE),
	REGISTER_MSG(WM_MOUSEHOVER),
	REGISTER_MSG(WM_MOUSEHWHEEL),
	REGISTER_MSG(WM_MOUSELEAVE),
	REGISTER_MSG(WM_MOUSEMOVE),
	REGISTER_MSG(WM_MOUSEWHEEL),
	REGISTER_MSG(WM_NCHITTEST),
	REGISTER_MSG(WM_NCLBUTTONDBLCLK),

};

class WindowsMsgMap
{
public:
	WindowsMsgMap();
	
	std::string operator()(const UINT& msg, const WPARAM& wparam, const LPARAM& lparam);
	~WindowsMsgMap();

//private:
//	std::unordered_map<UINT, std::string> _msgMap;

};

